// rag.js ‚Äì Anv√§nder Weaviate + OpenAI GPT
import weaviate from 'weaviate-ts-client';
import dotenv from 'dotenv/config';
import { OpenAI } from 'openai';

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY
});

const client = weaviate.client({
  scheme: 'https',
  host: process.env.WEAVIATE_HOST,
  headers: {
    'X-OpenAI-Api-Key': process.env.OPENAI_API_KEY,
    'Authorization': `Bearer ${process.env.WEAVIATE_API_KEY}`
  }
});

const CLASS_NAME = 'FK_Document';

export async function askRAG(query) {
  try {
    // üîç 1. Semantisk s√∂kning i Weaviate
    const result = await client.graphql.get()
      .withClassName(CLASS_NAME)
      .withFields('text source')
      .withNearText({ concepts: [query] })
      .withLimit(5)
      .do();

    const docs = result.data.Get[CLASS_NAME];
    if (!docs || docs.length === 0) {
      return "Jag hittade tyv√§rr inget relevant inneh√•ll i kunskapsbasen.";
    }

    // üìÑ 2. Kombinera text fr√•n top-matcher
    const context = docs.map(doc => doc.text).join("\n\n");

    // ü§ñ 3. Skapa prompt till GPT
    const prompt = `
Du √§r en mycket kunnig assistent f√∂r F√∂rs√§kringskassan. Besvara fr√•gan baserat p√• nedanst√•ende information fr√•n officiella k√§llor. Svara p√• svenska.

### Information:
${context}

### Fr√•ga:
${query}

### Svar:
`;

    // üß† 4. H√§mta svar fr√•n GPT
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.3
    });

    return completion.choices[0].message.content;
  } catch (error) {
    console.error('‚ùå Fel i RAG-s√∂kning:', error.message);
    return "Ett fel uppstod vid h√§mtning av svar fr√•n GPT.";
  }
}
