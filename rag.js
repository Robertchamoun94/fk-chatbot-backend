export async function askRAG(query) {
  try {
    // üîÅ 1. Embeddar fr√•gan med OpenAI
    const embedded = await openai.embeddings.create({
      model: 'text-embedding-ada-002',
      input: query
    });

    const vector = embedded.data[0].embedding;

    // üîç 2. Semantisk s√∂kning i Weaviate
    const result = await client.graphql.get()
      .withClassName(CLASS_NAME)
      .withFields('text source')
      .withNearVector({ vector })
      .withLimit(5)
      .do();

    const docs = result.data.Get[CLASS_NAME];
    const context = docs && docs.length > 0
      ? docs.map(doc => doc.text).join("\n\n")
      : null;

    // üìÑ 3. Skapa GPT-prompt
    const prompt = context
      ? `Du √§r en mycket kunnig assistent f√∂r F√∂rs√§kringskassan. Besvara fr√•gan baserat p√• nedanst√•ende information fr√•n officiella k√§llor. Svara p√• svenska.

### Information:
${context}

### Fr√•ga:
${query}

### Svar:`
      : `Du √§r en mycket kunnig assistent f√∂r F√∂rs√§kringskassan. Fr√•gan nedan saknar direkt kopplad information fr√•n databasen, men besvara s√• gott du kan baserat p√• din egen kunskap. Svara p√• svenska.

### Fr√•ga:
${query}

### Svar:`;

    // ü§ñ 4. GPT-svar
    const completion = await openai.chat.completions.create({
      model: "gpt-4",
      messages: [{ role: "user", content: prompt }],
      temperature: 0.4
    });

    return completion.choices[0].message.content;

  } catch (error) {
    console.error('‚ùå Fel i RAG-s√∂kning:', error.message);
    return "Ett fel uppstod vid h√§mtning av svar fr√•n GPT.";
  }
}
